name: Build and Push Cloudflare DDNS to GHCR

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Script Syntax
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test entrypoint script syntax
      run: |
        # Test bash syntax
        bash -n entrypoint.sh
        echo "✓ entrypoint.sh syntax is valid"
        
        # Test if required files exist
        test -f Dockerfile || exit 1
        test -f entrypoint.sh || exit 1
        echo "✓ All required files present"

    - name: Test Dockerfile build
      run: |
        # Test that Dockerfile can be built
        docker build -t cloudflare-ddns-test .

  build:
    name: Build Multi-Arch Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  verify:
    name: Verify Multi-Arch Images
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify all architectures
      run: |
        # Get the latest tag
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Check each architecture
        architectures=("amd64" "386" "arm" "arm64")
        platforms=("linux/amd64" "linux/386" "linux/arm/v7" "linux/arm64")
        
        for i in "${!architectures[@]}"; do
          arch=${architectures[$i]}
          platform=${platforms[$i]}
          
          echo "Verifying $arch architecture ($platform)..."
          
          # Pull specific platform
          docker pull --platform $platform $LATEST_TAG
          
          # Verify image details
          ARCH_RESULT=$(docker image inspect $LATEST_TAG --format='{{.Architecture}}')
          OS_RESULT=$(docker image inspect $LATEST_TAG --format='{{.Os}}')
          
          echo "Architecture: $ARCH_RESULT, OS: $OS_RESULT"
          
          if [ "$OS_RESULT" != "linux" ]; then
            echo "❌ OS verification failed for $arch"
            exit 1
          fi
          
          echo "✓ $arch verified"
        done

    - name: Test container startup
      run: |
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Test amd64 startup (without actual API calls)
        docker pull --platform linux/amd64 $LATEST_TAG
        
        # Test that container starts and exits (since it will fail without env vars)
        docker run --rm --platform linux/amd64 $LATEST_TAG || true
        
        echo "✓ Container startup test completed"

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          Dockerfile
          entrypoint.sh
          README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
