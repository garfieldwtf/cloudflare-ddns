name: Build and Push Multi-Arch to GHCR and Docker Hub

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: garfieldwtf/cloudflare-ddns

jobs:
  test:
    name: Test Script Syntax
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test entrypoint script syntax
      run: |
        # Test bash syntax
        bash -n entrypoint.sh
        echo "‚úì entrypoint.sh syntax is valid"
        
        # Test if required files exist
        test -f Dockerfile || exit 1
        test -f entrypoint.sh || exit 1
        echo "‚úì All required files present"

    - name: Test Dockerfile build
      run: |
        # Test that Dockerfile can be built
        docker build -t cloudflare-ddns-test .

  build:
    name: Build Multi-Arch Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push to both registries
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  verify:
    name: Verify Multi-Arch Images
    runs-on: ubuntu-latest
    needs: build
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Verify GHCR images
      run: |
        echo "Verifying GHCR images..."
        LATEST_TAG_GHCR="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest"
        
        architectures=("amd64" "386" "arm" "arm64")
        platforms=("linux/amd64" "linux/386" "linux/arm/v7" "linux/arm64")
        
        for i in "${!architectures[@]}"; do
          arch=${architectures[$i]}
          platform=${platforms[$i]}
          
          echo "Verifying GHCR $arch architecture ($platform)..."
          docker pull --platform $platform $LATEST_TAG_GHCR
          ARCH_RESULT=$(docker image inspect $LATEST_TAG_GHCR --format='{{.Architecture}}')
          echo "‚úì GHCR $arch: $ARCH_RESULT"
        done

    - name: Verify Docker Hub images
      run: |
        echo "Verifying Docker Hub images..."
        LATEST_TAG_DOCKERHUB="${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest"
        
        architectures=("amd64" "386" "arm" "arm64")
        platforms=("linux/amd64" "linux/386" "linux/arm/v7" "linux/arm64")
        
        for i in "${!architectures[@]}"; do
          arch=${architectures[$i]}
          platform=${platforms[$i]}
          
          echo "Verifying Docker Hub $arch architecture ($platform)..."
          docker pull --platform $platform $LATEST_TAG_DOCKERHUB
          ARCH_RESULT=$(docker image inspect $LATEST_TAG_DOCKERHUB --format='{{.Architecture}}')
          echo "‚úì Docker Hub $arch: $ARCH_RESULT"
        done

    - name: Test container startup
      run: |
        # Test both registries
        LATEST_TAG_GHCR="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest"
        LATEST_TAG_DOCKERHUB="${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest"
        
        echo "Testing GHCR image startup..."
        docker run --rm --platform linux/amd64 $LATEST_TAG_GHCR echo "GHCR test successful" || true
        
        echo "Testing Docker Hub image startup..."
        docker run --rm --platform linux/amd64 $LATEST_TAG_DOCKERHUB echo "Docker Hub test successful" || true

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner on GHCR image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results-ghcr.sarif'

    - name: Run Trivy vulnerability scanner on Docker Hub image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results-dockerhub.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-ghcr.sarif'
      if: always()

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          Dockerfile
          entrypoint.sh
          README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build, verify, scan]
    if: success() && github.event_name != 'pull_request'
    
    steps:
    - name: Notify workflow completion
      run: |
        echo "üéâ Multi-arch build completed successfully!"
        echo "üì¶ Images pushed to:"
        echo "   - GHCR: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest"
        echo "   - Docker Hub: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest"
        echo "üèóÔ∏è  Supported architectures: amd64, 386, arm/v6, arm/v7, arm64"
