name: Build and Push Multi-Arch to GHCR and Docker Hub

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: garfieldwtf/cloudflare-ddns

jobs:
  test:
    name: Test Script Syntax
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test entrypoint script syntax
      run: |
        bash -n entrypoint.sh
        echo "‚úì entrypoint.sh syntax is valid"
        test -f Dockerfile || exit 1
        test -f entrypoint.sh || exit 1
        echo "‚úì All required files present"

    - name: Test Dockerfile build
      run: |
        docker build -t cloudflare-ddns-test .

  build-ghcr:
    name: Build for GHCR (All Tags)
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,arm,386,amd64,ppc64le

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for GHCR
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64,
          linux/ppc64le
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-dockerhub:
    name: Build for Docker Hub (Specific Tags)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,arm,386,amd64,ppc64le

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push specific tags to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64,
          linux/ppc64le
        push: true
        tags: |
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:386
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:x64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:ppc64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:armv7
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm
        cache-from: type=gha
        cache-to: type=gha,mode=max

  verify:
    name: Verify All Architectures
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Verify Docker Hub tags and architectures
      run: |
        # Define tags to verify
        tags=("latest" "386" "x64" "ppc64" "armv7" "arm")
        
        # Define platform mapping for each tag
        declare -A tag_platforms=(
          ["latest"]="linux/amd64"
          ["386"]="linux/386"
          ["x64"]="linux/amd64"
          ["ppc64"]="linux/ppc64le"
          ["armv7"]="linux/arm/v7"
          ["arm"]="linux/arm/v7"
        )

        declare -A expected_arch=(
          ["latest"]="amd64"
          ["386"]="386"
          ["x64"]="amd64"
          ["ppc64"]="ppc64le"
          ["armv7"]="arm"
          ["arm"]="arm"
        )

        for tag in "${tags[@]}"; do
          echo "=== Verifying tag: $tag ==="
          IMAGE_TAG="${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${tag}"
          platform="${tag_platforms[$tag]}"
          expected="${expected_arch[$tag]}"
          
          echo "üîç Testing $IMAGE_TAG on platform $platform..."
          
          if docker pull --platform "$platform" "$IMAGE_TAG"; then
            # Verify architecture
            ARCH_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Architecture}}')
            OS_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Os}}')
            
            if [ "$ARCH_RESULT" == "$expected" ]; then
              echo "‚úÖ $tag: Architecture=$ARCH_RESULT (expected: $expected), OS=$OS_RESULT"
            else
              echo "‚ùå Architecture mismatch for $tag: got $ARCH_RESULT, expected $expected"
              exit 1
            fi
          else
            echo "‚ùå Failed to pull $tag from Docker Hub"
            exit 1
          fi
          echo ""
        done

    - name: Verify no commit tags exist in Docker Hub
      run: |
        # This should fail if commit tags exist (which is what we want)
        set +e
        docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:sha-0000000 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "‚ùå Commit tags should not exist in Docker Hub"
          exit 1
        else
          echo "‚úÖ No commit tags found in Docker Hub (as expected)"
        fi
        set -e

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy on Docker Hub images
      run: |
        # Scan main Docker Hub tags
        TAGS=("latest" "386" "x64" "armv7")
        
        for tag in "${TAGS[@]}"; do
          echo "Scanning tag: $tag"
          docker run --rm aquasec/trivy:latest image \
            --format table \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:$tag
        done

  manifest:
    name: Create Architecture-Specific Manifests
    runs-on: ubuntu-latest
    needs: build-dockerhub
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Create architecture-specific manifests
      run: |
        # Create manifest for each architecture tag
        docker manifest create ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:386 \
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:386
        
        docker manifest create ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:x64 \
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:x64
        
        docker manifest create ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:ppc64 \
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:ppc64
        
        docker manifest create ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:armv7 \
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:armv7
        
        docker manifest create ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm \
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm

        # Push manifests
        docker manifest push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:386
        docker manifest push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:x64
        docker manifest push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:ppc64
        docker manifest push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:armv7
        docker manifest push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          Dockerfile
          entrypoint.sh
          README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub, verify, scan]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Build Summary
      run: |
        echo "üéâ Multi-architecture build completed!"
        echo ""
        echo "üì¶ Docker Hub Tags Available:"
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:latest    (multi-arch)"
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:386       (32-bit Intel/AMD)"
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:x64       (64-bit Intel/AMD)" 
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:ppc64     (PowerPC 64-bit)"
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:armv7     (ARMv7 devices)"
        echo "   ‚Ä¢ garfieldwtf/cloudflare-ddns:arm       (ARMv7 alias)"
        echo ""
        echo "üèóÔ∏è GHCR Tags Available:"
        echo "   ‚Ä¢ All tags including commits and branches"
        echo ""
        echo "üîç Usage Examples:"
        echo "   docker pull garfieldwtf/cloudflare-ddns:386"
        echo "   docker pull garfieldwtf/cloudflare-ddns:ppc64"
        echo "   docker run --platform linux/386 garfieldwtf/cloudflare-ddns:386"
